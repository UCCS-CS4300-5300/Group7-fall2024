============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-8.3.4, pluggy-1.5.0
rootdir: /root/Optimal_performance/Group7-fall2024
plugins: cov-6.0.0
collected 154 items

home/tests/test_all_views/test_views.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 20%]
FFFFFFFFFFFFFFFF                                                         [ 31%]
home/tests/test_models/test_builds.py FFF                                [ 33%]
home/tests/test_models/test_cpus.py EEEEEEEEEEEEE                        [ 41%]
home/tests/test_models/test_cpusockettype.py EEEEE                       [ 44%]
home/tests/test_models/test_formfactor.py .....                          [ 48%]
home/tests/test_models/test_manufacturers.py EEEEE                       [ 51%]
home/tests/test_models/test_microarchitecture.py EEEEE                   [ 54%]
home/tests/test_models/test_motherboards.py FFFFFFFFFFFFFF               [ 63%]
home/tests/test_models/test_ram.py EEEEEEEEEEEEEE                        [ 72%]
home/tests/test_models/test_ram_attributes.py EEEEEEEEEEEEEEFF.          [ 83%]
home/tests/test_models/test_storage.py EEEEEEEEEEEE                      [ 91%]
home/tests/test_models/test_storage_attributes.py EEEEEEEEEE             [ 98%]
home/tests/test_models/test_user_profile.py FFF                          [100%]

==================================== ERRORS ====================================
__________ ERROR at setup of CPUTestCase.test_CPU_cpu_id_field_label ___________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______ ERROR at setup of CPUTestCase.test_CPU_manufacturer_field_label ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____ ERROR at setup of CPUTestCase.test_CPU_microarchitecture_field_label _____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___________ ERROR at setup of CPUTestCase.test_CPU_name_field_label ____________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ ERROR at setup of CPUTestCase.test_CPU_object_cpu_id_values __________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____ ERROR at setup of CPUTestCase.test_CPU_object_cpu_manufacturer_values _____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__ ERROR at setup of CPUTestCase.test_CPU_object_cpu_microarchitecture_values __

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____ ERROR at setup of CPUTestCase.test_CPU_object_cpu_socket_type_values _____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ ERROR at setup of CPUTestCase.test_CPU_object_fields_values __________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________ ERROR at setup of CPUTestCase.test_CPU_socket_type_field_label ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____________ ERROR at setup of CPUTestCase.test_cpu_name_validation ____________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ ERROR at setup of CPUTestCase.test_cpu_str __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________ ERROR at setup of CPUTestCase.test_unique_cpu_id _______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d7e90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpus.CPUTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
        cls.manufacturer1 = Manufacturer.objects.create(name="UniqueIntel")
        cls.manufacturer2 = Manufacturer.objects.create(name="UniqueAMD")
    
        # Create unique Microarchitecture instances
>       cls.microarchitecture1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_cpus.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of CPUSocketTypeTestCase.test_CPUSocketType_name_field_label __

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da6f8680>
sql = 'INSERT INTO "home_cpusockettype" ("name") VALUES (%s) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da6f8680>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "home_cpusockettype" ("name") VALUES (?) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_cpusockettype.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpusockettype.CPUSocketTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create CPU socket type instances
>       cls.socket_type1 = CPUSocketType.objects.create(name="LGA1151")

home/tests/test_models/test_cpusockettype.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "home_cpusockettype" ("name") VALUES (?) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_cpusockettype.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of CPUSocketTypeTestCase.test_CPUSocketType_object_fields_values _

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da6f8680>
sql = 'INSERT INTO "home_cpusockettype" ("name") VALUES (%s) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da6f8680>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "home_cpusockettype" ("name") VALUES (?) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_cpusockettype.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpusockettype.CPUSocketTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create CPU socket type instances
>       cls.socket_type1 = CPUSocketType.objects.create(name="LGA1151")

home/tests/test_models/test_cpusockettype.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "home_cpusockettype" ("name") VALUES (?) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_cpusockettype.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__ ERROR at setup of CPUSocketTypeTestCase.test_cpusockettype_name_validation __

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da6f8680>
sql = 'INSERT INTO "home_cpusockettype" ("name") VALUES (%s) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da6f8680>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "home_cpusockettype" ("name") VALUES (?) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_cpusockettype.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpusockettype.CPUSocketTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create CPU socket type instances
>       cls.socket_type1 = CPUSocketType.objects.create(name="LGA1151")

home/tests/test_models/test_cpusockettype.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "home_cpusockettype" ("name") VALUES (?) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_cpusockettype.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________ ERROR at setup of CPUSocketTypeTestCase.test_cpusockettype_str ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da6f8680>
sql = 'INSERT INTO "home_cpusockettype" ("name") VALUES (%s) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da6f8680>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "home_cpusockettype" ("name") VALUES (?) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_cpusockettype.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpusockettype.CPUSocketTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create CPU socket type instances
>       cls.socket_type1 = CPUSocketType.objects.create(name="LGA1151")

home/tests/test_models/test_cpusockettype.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "home_cpusockettype" ("name") VALUES (?) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_cpusockettype.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____ ERROR at setup of CPUSocketTypeTestCase.test_unique_cpusockettype_name ____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da6f8680>
sql = 'INSERT INTO "home_cpusockettype" ("name") VALUES (%s) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da6f8680>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "home_cpusockettype" ("name") VALUES (?) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_cpusockettype.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_cpusockettype.CPUSocketTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create CPU socket type instances
>       cls.socket_type1 = CPUSocketType.objects.create(name="LGA1151")

home/tests/test_models/test_cpusockettype.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "home_cpusockettype" ("name") VALUES (?) RETURNING "home_cpusockettype"."id"'
params = ('LGA1151',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_cpusockettype.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__ ERROR at setup of ManufacturerTestCase.test_Manufacturer_name_field_label ___

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393020>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Intel',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393020>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305fd0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Intel',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_manufacturers.ManufacturerTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create manufacturer instances
>       cls.manufacturer1 = Manufacturer.objects.create(name="Intel")

home/tests/test_models/test_manufacturers.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305fd0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Intel',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of ManufacturerTestCase.test_Manufacturer_object_fields_values _

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393020>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Intel',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393020>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305fd0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Intel',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_manufacturers.ManufacturerTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create manufacturer instances
>       cls.manufacturer1 = Manufacturer.objects.create(name="Intel")

home/tests/test_models/test_manufacturers.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305fd0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Intel',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___ ERROR at setup of ManufacturerTestCase.test_manufacturer_name_validation ___

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393020>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Intel',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393020>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305fd0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Intel',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_manufacturers.ManufacturerTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create manufacturer instances
>       cls.manufacturer1 = Manufacturer.objects.create(name="Intel")

home/tests/test_models/test_manufacturers.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305fd0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Intel',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ ERROR at setup of ManufacturerTestCase.test_manufacturer_str _________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393020>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Intel',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393020>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305fd0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Intel',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_manufacturers.ManufacturerTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create manufacturer instances
>       cls.manufacturer1 = Manufacturer.objects.create(name="Intel")

home/tests/test_models/test_manufacturers.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305fd0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Intel',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____ ERROR at setup of ManufacturerTestCase.test_unique_manufacturer_name _____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393020>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Intel',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393020>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305fd0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Intel',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_manufacturers.ManufacturerTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create manufacturer instances
>       cls.manufacturer1 = Manufacturer.objects.create(name="Intel")

home/tests/test_models/test_manufacturers.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305fd0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Intel',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of MicroarchitectureTestCase.test_Microarchitecture_name_field_label _

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e9f0>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e9f0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_microarchitecture.MicroarchitectureTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create microarchitecture instances
>       cls.microarch1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_microarchitecture.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of MicroarchitectureTestCase.test_Microarchitecture_object_fields_values _

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e9f0>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e9f0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_microarchitecture.MicroarchitectureTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create microarchitecture instances
>       cls.microarch1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_microarchitecture.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of MicroarchitectureTestCase.test_microarchitecture_name_validation _

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e9f0>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e9f0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_microarchitecture.MicroarchitectureTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create microarchitecture instances
>       cls.microarch1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_microarchitecture.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____ ERROR at setup of MicroarchitectureTestCase.test_microarchitecture_str ____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e9f0>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e9f0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_microarchitecture.MicroarchitectureTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create microarchitecture instances
>       cls.microarch1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_microarchitecture.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of MicroarchitectureTestCase.test_unique_microarchitecture_name _

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e9f0>
sql = 'INSERT INTO "home_microarchitecture" ("name") VALUES (%s) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e9f0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_microarchitecture.MicroarchitectureTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create microarchitecture instances
>       cls.microarch1 = Microarchitecture.objects.create(name="Zen 2")

home/tests/test_models/test_microarchitecture.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "home_microarchitecture" ("name") VALUES (?) RETURNING "home_microarchitecture"."id"'
params = ('Zen 2',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_microarchitecture.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______ ERROR at setup of RAMTestCase.test_RAM_manufacturer_field_label ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___________ ERROR at setup of RAMTestCase.test_RAM_name_field_label ____________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ ERROR at setup of RAMTestCase.test_RAM_object_fields_values __________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ ERROR at setup of RAMTestCase.test_RAM_object_ram_id_values __________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____ ERROR at setup of RAMTestCase.test_RAM_object_ram_manufacturer_values _____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________ ERROR at setup of RAMTestCase.test_RAM_object_ram_speed_values ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________ ERROR at setup of RAMTestCase.test_RAM_object_ram_type_values _________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________ ERROR at setup of RAMTestCase.test_RAM_ram_id_field_label ___________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ ERROR at setup of RAMTestCase.test_RAM_ram_speed_field_label _________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ ERROR at setup of RAMTestCase.test_RAM_ram_type_field_label __________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____________ ERROR at setup of RAMTestCase.test_ram_name_validation ____________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___________ ERROR at setup of RAMTestCase.test_ram_speed_validation ____________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ ERROR at setup of RAMTestCase.test_ram_str __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________ ERROR at setup of RAMTestCase.test_unique_ram_id _______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db390740>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram.RAMTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Kingston")

home/tests/test_models/test_ram.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cdbe0>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Kingston',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____ ERROR at setup of RAMTypeTestCase.test_RAMType_object_fields_values ______

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9a4e0>
sql = 'INSERT INTO "home_ramtype" ("type") VALUES (%s) RETURNING "home_ramtype"."id"'
params = ('DDR4',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9a4e0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cfb60>
query = 'INSERT INTO "home_ramtype" ("type") VALUES (?) RETURNING "home_ramtype"."id"'
params = ('DDR4',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramtype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_type1 = RAMType.objects.create(type="DDR4")

home/tests/test_models/test_ram_attributes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cfb60>
query = 'INSERT INTO "home_ramtype" ("type") VALUES (?) RETURNING "home_ramtype"."id"'
params = ('DDR4',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramtype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______ ERROR at setup of RAMTypeTestCase.test_RAMType_type_field_label ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9a4e0>
sql = 'INSERT INTO "home_ramtype" ("type") VALUES (%s) RETURNING "home_ramtype"."id"'
params = ('DDR4',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9a4e0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cfb60>
query = 'INSERT INTO "home_ramtype" ("type") VALUES (?) RETURNING "home_ramtype"."id"'
params = ('DDR4',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramtype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_type1 = RAMType.objects.create(type="DDR4")

home/tests/test_models/test_ram_attributes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cfb60>
query = 'INSERT INTO "home_ramtype" ("type") VALUES (?) RETURNING "home_ramtype"."id"'
params = ('DDR4',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramtype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____________ ERROR at setup of RAMTypeTestCase.test_ram_type_str ______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9a4e0>
sql = 'INSERT INTO "home_ramtype" ("type") VALUES (%s) RETURNING "home_ramtype"."id"'
params = ('DDR4',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9a4e0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cfb60>
query = 'INSERT INTO "home_ramtype" ("type") VALUES (?) RETURNING "home_ramtype"."id"'
params = ('DDR4',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramtype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_type1 = RAMType.objects.create(type="DDR4")

home/tests/test_models/test_ram_attributes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cfb60>
query = 'INSERT INTO "home_ramtype" ("type") VALUES (?) RETURNING "home_ramtype"."id"'
params = ('DDR4',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramtype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________ ERROR at setup of RAMTypeTestCase.test_ram_type_validation __________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9a4e0>
sql = 'INSERT INTO "home_ramtype" ("type") VALUES (%s) RETURNING "home_ramtype"."id"'
params = ('DDR4',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9a4e0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cfb60>
query = 'INSERT INTO "home_ramtype" ("type") VALUES (?) RETURNING "home_ramtype"."id"'
params = ('DDR4',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramtype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_type1 = RAMType.objects.create(type="DDR4")

home/tests/test_models/test_ram_attributes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cfb60>
query = 'INSERT INTO "home_ramtype" ("type") VALUES (?) RETURNING "home_ramtype"."id"'
params = ('DDR4',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramtype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____________ ERROR at setup of RAMTypeTestCase.test_unique_ram_type ____________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9a4e0>
sql = 'INSERT INTO "home_ramtype" ("type") VALUES (%s) RETURNING "home_ramtype"."id"'
params = ('DDR4',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9a4e0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cfb60>
query = 'INSERT INTO "home_ramtype" ("type") VALUES (?) RETURNING "home_ramtype"."id"'
params = ('DDR4',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramtype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_type1 = RAMType.objects.create(type="DDR4")

home/tests/test_models/test_ram_attributes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cfb60>
query = 'INSERT INTO "home_ramtype" ("type") VALUES (?) RETURNING "home_ramtype"."id"'
params = ('DDR4',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramtype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____ ERROR at setup of RAMSpeedTestCase.test_RAMSpeed_object_fields_values _____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad29370>
sql = 'INSERT INTO "home_ramspeed" ("speed") VALUES (%s) RETURNING "home_ramspeed"."id"'
params = (3200,)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad29370>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce060>
query = 'INSERT INTO "home_ramspeed" ("speed") VALUES (?) RETURNING "home_ramspeed"."id"'
params = (3200,)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramspeed.speed

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMSpeedTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_speed1 = RAMSpeed.objects.create(speed=3200)

home/tests/test_models/test_ram_attributes.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce060>
query = 'INSERT INTO "home_ramspeed" ("speed") VALUES (?) RETURNING "home_ramspeed"."id"'
params = (3200,)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramspeed.speed

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______ ERROR at setup of RAMSpeedTestCase.test_RAMSpeed_speed_field_label ______

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad29370>
sql = 'INSERT INTO "home_ramspeed" ("speed") VALUES (%s) RETURNING "home_ramspeed"."id"'
params = (3200,)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad29370>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce060>
query = 'INSERT INTO "home_ramspeed" ("speed") VALUES (?) RETURNING "home_ramspeed"."id"'
params = (3200,)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramspeed.speed

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMSpeedTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_speed1 = RAMSpeed.objects.create(speed=3200)

home/tests/test_models/test_ram_attributes.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce060>
query = 'INSERT INTO "home_ramspeed" ("speed") VALUES (?) RETURNING "home_ramspeed"."id"'
params = (3200,)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramspeed.speed

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____________ ERROR at setup of RAMSpeedTestCase.test_ram_speed_str _____________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad29370>
sql = 'INSERT INTO "home_ramspeed" ("speed") VALUES (%s) RETURNING "home_ramspeed"."id"'
params = (3200,)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad29370>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce060>
query = 'INSERT INTO "home_ramspeed" ("speed") VALUES (?) RETURNING "home_ramspeed"."id"'
params = (3200,)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramspeed.speed

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMSpeedTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_speed1 = RAMSpeed.objects.create(speed=3200)

home/tests/test_models/test_ram_attributes.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce060>
query = 'INSERT INTO "home_ramspeed" ("speed") VALUES (?) RETURNING "home_ramspeed"."id"'
params = (3200,)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramspeed.speed

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ ERROR at setup of RAMSpeedTestCase.test_ram_speed_validation _________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad29370>
sql = 'INSERT INTO "home_ramspeed" ("speed") VALUES (%s) RETURNING "home_ramspeed"."id"'
params = (3200,)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad29370>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce060>
query = 'INSERT INTO "home_ramspeed" ("speed") VALUES (?) RETURNING "home_ramspeed"."id"'
params = (3200,)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramspeed.speed

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMSpeedTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_speed1 = RAMSpeed.objects.create(speed=3200)

home/tests/test_models/test_ram_attributes.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce060>
query = 'INSERT INTO "home_ramspeed" ("speed") VALUES (?) RETURNING "home_ramspeed"."id"'
params = (3200,)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramspeed.speed

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of RAMCapacityTestCase.test_RAMCapacity_capacity_field_label __

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c6d80>
sql = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (%s) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c6d80>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cde20>
query = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (?) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramcapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMCapacityTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_capacity1 = RAMCapacity.objects.create(capacity="16GB")

home/tests/test_models/test_ram_attributes.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cde20>
query = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (?) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramcapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of RAMCapacityTestCase.test_RAMCapacity_object_fields_values __

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c6d80>
sql = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (%s) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c6d80>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cde20>
query = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (?) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramcapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMCapacityTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_capacity1 = RAMCapacity.objects.create(capacity="16GB")

home/tests/test_models/test_ram_attributes.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cde20>
query = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (?) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramcapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ ERROR at setup of RAMCapacityTestCase.test_ram_capacity_str __________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c6d80>
sql = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (%s) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c6d80>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cde20>
query = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (?) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramcapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMCapacityTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_capacity1 = RAMCapacity.objects.create(capacity="16GB")

home/tests/test_models/test_ram_attributes.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cde20>
query = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (?) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramcapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______ ERROR at setup of RAMCapacityTestCase.test_ram_capacity_validation ______

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c6d80>
sql = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (%s) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c6d80>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cde20>
query = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (?) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramcapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMCapacityTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_capacity1 = RAMCapacity.objects.create(capacity="16GB")

home/tests/test_models/test_ram_attributes.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cde20>
query = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (?) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramcapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________ ERROR at setup of RAMCapacityTestCase.test_unique_ram_capacity ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c6d80>
sql = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (%s) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c6d80>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cde20>
query = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (?) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_ramcapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_ram_attributes.RAMCapacityTestCase'>

    @classmethod
    def setUpTestData(cls):
>       cls.ram_capacity1 = RAMCapacity.objects.create(capacity="16GB")

home/tests/test_models/test_ram_attributes.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cde20>
query = 'INSERT INTO "home_ramcapacity" ("capacity") VALUES (?) RETURNING "home_ramcapacity"."id"'
params = ('16GB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_ramcapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___ ERROR at setup of StorageTestCase.test_Storage_manufacturer_field_label ____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______ ERROR at setup of StorageTestCase.test_Storage_name_field_label ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____ ERROR at setup of StorageTestCase.test_Storage_object_fields_values ______

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of StorageTestCase.test_Storage_object_storage_capacity_values _

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___ ERROR at setup of StorageTestCase.test_Storage_object_storage_id_values ____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of StorageTestCase.test_Storage_object_storage_manufacturer_values _

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__ ERROR at setup of StorageTestCase.test_Storage_object_storage_type_values ___

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____ ERROR at setup of StorageTestCase.test_Storage_storage_id_field_label _____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___ ERROR at setup of StorageTestCase.test_Storage_storage_type_field_label ____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________ ERROR at setup of StorageTestCase.test_storage_name_validation ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______________ ERROR at setup of StorageTestCase.test_storage_str ______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___________ ERROR at setup of StorageTestCase.test_unique_storage_id ___________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>
sql = 'INSERT INTO "home_manufacturer" ("name") VALUES (%s) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db109130>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage.StorageTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create unique manufacturers to avoid UNIQUE constraint violations
>       cls.manufacturer1 = Manufacturer.objects.create(name="Samsung")

home/tests/test_models/test_storage.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db190d40>
query = 'INSERT INTO "home_manufacturer" ("name") VALUES (?) RETURNING "home_manufacturer"."id"'
params = ('Samsung',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_manufacturer.name

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of StorageTypeTestCase.test_StorageType_object_fields_values __

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9b590>
sql = 'INSERT INTO "home_storagetype" ("type") VALUES (%s) RETURNING "home_storagetype"."id"'
params = ('SSD',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9b590>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192c30>
query = 'INSERT INTO "home_storagetype" ("type") VALUES (?) RETURNING "home_storagetype"."id"'
params = ('SSD',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_storagetype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage_attributes.StorageTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create storage type instances
>       cls.storage_type1 = StorageType.objects.create(type="SSD")

home/tests/test_models/test_storage_attributes.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192c30>
query = 'INSERT INTO "home_storagetype" ("type") VALUES (?) RETURNING "home_storagetype"."id"'
params = ('SSD',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_storagetype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___ ERROR at setup of StorageTypeTestCase.test_StorageType_type_field_label ____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9b590>
sql = 'INSERT INTO "home_storagetype" ("type") VALUES (%s) RETURNING "home_storagetype"."id"'
params = ('SSD',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9b590>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192c30>
query = 'INSERT INTO "home_storagetype" ("type") VALUES (?) RETURNING "home_storagetype"."id"'
params = ('SSD',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_storagetype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage_attributes.StorageTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create storage type instances
>       cls.storage_type1 = StorageType.objects.create(type="SSD")

home/tests/test_models/test_storage_attributes.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192c30>
query = 'INSERT INTO "home_storagetype" ("type") VALUES (?) RETURNING "home_storagetype"."id"'
params = ('SSD',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_storagetype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ ERROR at setup of StorageTypeTestCase.test_storage_type_str __________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9b590>
sql = 'INSERT INTO "home_storagetype" ("type") VALUES (%s) RETURNING "home_storagetype"."id"'
params = ('SSD',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9b590>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192c30>
query = 'INSERT INTO "home_storagetype" ("type") VALUES (?) RETURNING "home_storagetype"."id"'
params = ('SSD',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_storagetype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage_attributes.StorageTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create storage type instances
>       cls.storage_type1 = StorageType.objects.create(type="SSD")

home/tests/test_models/test_storage_attributes.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192c30>
query = 'INSERT INTO "home_storagetype" ("type") VALUES (?) RETURNING "home_storagetype"."id"'
params = ('SSD',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_storagetype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______ ERROR at setup of StorageTypeTestCase.test_storage_type_validation ______

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9b590>
sql = 'INSERT INTO "home_storagetype" ("type") VALUES (%s) RETURNING "home_storagetype"."id"'
params = ('SSD',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9b590>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192c30>
query = 'INSERT INTO "home_storagetype" ("type") VALUES (?) RETURNING "home_storagetype"."id"'
params = ('SSD',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_storagetype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage_attributes.StorageTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create storage type instances
>       cls.storage_type1 = StorageType.objects.create(type="SSD")

home/tests/test_models/test_storage_attributes.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192c30>
query = 'INSERT INTO "home_storagetype" ("type") VALUES (?) RETURNING "home_storagetype"."id"'
params = ('SSD',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_storagetype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________ ERROR at setup of StorageTypeTestCase.test_unique_storage_type ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9b590>
sql = 'INSERT INTO "home_storagetype" ("type") VALUES (%s) RETURNING "home_storagetype"."id"'
params = ('SSD',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dad9b590>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192c30>
query = 'INSERT INTO "home_storagetype" ("type") VALUES (?) RETURNING "home_storagetype"."id"'
params = ('SSD',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_storagetype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage_attributes.StorageTypeTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create storage type instances
>       cls.storage_type1 = StorageType.objects.create(type="SSD")

home/tests/test_models/test_storage_attributes.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192c30>
query = 'INSERT INTO "home_storagetype" ("type") VALUES (?) RETURNING "home_storagetype"."id"'
params = ('SSD',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_storagetype.type

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of StorageCapacityTestCase.test_StorageCapacity_capacity_field_label _

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db165f70>
sql = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (%s) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db165f70>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192cc0>
query = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (?) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_storagecapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage_attributes.StorageCapacityTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create storage capacity instances
>       cls.storage_capacity1 = StorageCapacity.objects.create(capacity="1TB")

home/tests/test_models/test_storage_attributes.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192cc0>
query = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (?) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_storagecapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_ ERROR at setup of StorageCapacityTestCase.test_StorageCapacity_object_fields_values _

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db165f70>
sql = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (%s) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db165f70>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192cc0>
query = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (?) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_storagecapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage_attributes.StorageCapacityTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create storage capacity instances
>       cls.storage_capacity1 = StorageCapacity.objects.create(capacity="1TB")

home/tests/test_models/test_storage_attributes.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192cc0>
query = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (?) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_storagecapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____ ERROR at setup of StorageCapacityTestCase.test_storage_capacity_str ______

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db165f70>
sql = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (%s) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db165f70>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192cc0>
query = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (?) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_storagecapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage_attributes.StorageCapacityTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create storage capacity instances
>       cls.storage_capacity1 = StorageCapacity.objects.create(capacity="1TB")

home/tests/test_models/test_storage_attributes.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192cc0>
query = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (?) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_storagecapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__ ERROR at setup of StorageCapacityTestCase.test_storage_capacity_validation __

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db165f70>
sql = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (%s) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db165f70>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192cc0>
query = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (?) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_storagecapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage_attributes.StorageCapacityTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create storage capacity instances
>       cls.storage_capacity1 = StorageCapacity.objects.create(capacity="1TB")

home/tests/test_models/test_storage_attributes.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192cc0>
query = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (?) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_storagecapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____ ERROR at setup of StorageCapacityTestCase.test_unique_storage_capacity ____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db165f70>
sql = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (%s) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db165f70>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192cc0>
query = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (?) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: home_storagecapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

cls = <class 'home.tests.test_models.test_storage_attributes.StorageCapacityTestCase'>

    @classmethod
    def setUpTestData(cls):
        # Create storage capacity instances
>       cls.storage_capacity1 = StorageCapacity.objects.create(capacity="1TB")

home/tests/test_models/test_storage_attributes.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:679: in create
    obj.save(force_insert=True, using=self.db)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192cc0>
query = 'INSERT INTO "home_storagecapacity" ("capacity") VALUES (?) RETURNING "home_storagecapacity"."id"'
params = ('1TB',)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: home_storagecapacity.capacity

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
=================================== FAILURES ===================================
_________________________ ViewsTestCase.test_404_view __________________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db436000>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$jxwCQuao9ZwR3XNjP4DxBd$KLzDm7LleBVC1JzE/t7PZQsGGoha+MuCbF+e4UP+2kU=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db436000>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db45c680>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$jxwCQuao9ZwR3XNjP4DxBd$KLzDm7LleBVC1JzE/t7PZQsGGoha+MuCbF+e4UP+2kU=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_404_view>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db45c680>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$jxwCQuao9ZwR3XNjP4DxBd$KLzDm7LleBVC1JzE/t7PZQsGGoha+MuCbF+e4UP+2kU=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ ViewsTestCase.test_account_page_no_builds ___________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db437a10>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$qvZ1ydnMpgJiAoh4mPcbQE$M+0/L9v4guxwhmsNEd4h030PMZV15IgMiAhR1PnDL8E=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db437a10>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48ef90>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$qvZ1ydnMpgJiAoh4mPcbQE$M+0/L9v4guxwhmsNEd4h030PMZV15IgMiAhR1PnDL8E=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_account_page_no_builds>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48ef90>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$qvZ1ydnMpgJiAoh4mPcbQE$M+0/L9v4guxwhmsNEd4h030PMZV15IgMiAhR1PnDL8E=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____________________ ViewsTestCase.test_account_page_view _____________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4a8710>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$AqJaSKIojy7KxY6bvx5n03$WsJieK4RNeaRRhavucqGfSyuGM70rKGw8PA2a6u4+CE=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4a8710>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48d880>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$AqJaSKIojy7KxY6bvx5n03$WsJieK4RNeaRRhavucqGfSyuGM70rKGw8PA2a6u4+CE=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_account_page_view>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48d880>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$AqJaSKIojy7KxY6bvx5n03$WsJieK4RNeaRRhavucqGfSyuGM70rKGw8PA2a6u4+CE=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____________ ViewsTestCase.test_add_component_missing_parameters ______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4a9e20>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ra7nOEgrVKI4tPTWUfrGpL$hQVUBqMhRU/yeYNanrkMJRg0GIw5sLrHiXID0IDFCYs=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4a9e20>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48d9a0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ra7nOEgrVKI4tPTWUfrGpL$hQVUBqMhRU/yeYNanrkMJRg0GIw5sLrHiXID0IDFCYs=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_add_component_missing_parameters>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48d9a0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ra7nOEgrVKI4tPTWUfrGpL$hQVUBqMhRU/yeYNanrkMJRg0GIw5sLrHiXID0IDFCYs=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ ViewsTestCase.test_add_duplicate_component __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4ab8f0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$SAtrapoZjpDx6xt5ICDmZW$WATlRORysET+MIo0GbK86GdvPTp4VIJgIcO5vcdjvOE=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4ab8f0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48d880>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$SAtrapoZjpDx6xt5ICDmZW$WATlRORysET+MIo0GbK86GdvPTp4VIJgIcO5vcdjvOE=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_add_duplicate_component>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48d880>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$SAtrapoZjpDx6xt5ICDmZW$WATlRORysET+MIo0GbK86GdvPTp4VIJgIcO5vcdjvOE=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________________ ViewsTestCase.test_add_to_build ________________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4c7c50>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$VumXgkPsyS9hNsJUvhfHOz$ylZBpSuwRPTfqeXkaR9UFQM8DTXcGw+ZcXwULC1IkW0=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4c7c50>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48dc70>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$VumXgkPsyS9hNsJUvhfHOz$ylZBpSuwRPTfqeXkaR9UFQM8DTXcGw+ZcXwULC1IkW0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_add_to_build>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48dc70>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$VumXgkPsyS9hNsJUvhfHOz$ylZBpSuwRPTfqeXkaR9UFQM8DTXcGw+ZcXwULC1IkW0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________________ ViewsTestCase.test_add_to_build_invalid_build _________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4c5b20>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$3C9FrCierrCa1ICyoemCYo$qAgshj1pEz0DAT6WUWL1FXoKqiAQyr2k7MbmjXWZNu8=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4c5b20>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1250>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$3C9FrCierrCa1ICyoemCYo$qAgshj1pEz0DAT6WUWL1FXoKqiAQyr2k7MbmjXWZNu8=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_add_to_build_invalid_build>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1250>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$3C9FrCierrCa1ICyoemCYo$qAgshj1pEz0DAT6WUWL1FXoKqiAQyr2k7MbmjXWZNu8=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______________ ViewsTestCase.test_add_to_build_missing_component _______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4ab4a0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$eHkDjD2PA57C0FIOBfOC2j$SshQFfobtE+Zke3o0u4/AhKeVlCTUESnDtUK0/xu+8s=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4ab4a0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48ede0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$eHkDjD2PA57C0FIOBfOC2j$SshQFfobtE+Zke3o0u4/AhKeVlCTUESnDtUK0/xu+8s=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_add_to_build_missing_component>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48ede0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$eHkDjD2PA57C0FIOBfOC2j$SshQFfobtE+Zke3o0u4/AhKeVlCTUESnDtUK0/xu+8s=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____________________ ViewsTestCase.test_authenticated_page _____________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4151f0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ujlWugaQ1U6lyLh4qhoEKH$8xv/gp9evSqq28sI3EIrz2ilQkoqLH5tg3oX3kXrwY0=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4151f0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48ef90>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ujlWugaQ1U6lyLh4qhoEKH$8xv/gp9evSqq28sI3EIrz2ilQkoqLH5tg3oX3kXrwY0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_authenticated_page>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48ef90>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ujlWugaQ1U6lyLh4qhoEKH$8xv/gp9evSqq28sI3EIrz2ilQkoqLH5tg3oX3kXrwY0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________________ ViewsTestCase.test_build_page_empty_components ________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4c6150>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$RhUbqg4ZjPd5hSu122k3Zd$g1BlEqxVHRKYVz9tWMOVr5r+O3btcdbzP42iu8Z+3mc=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4c6150>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48dc70>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$RhUbqg4ZjPd5hSu122k3Zd$g1BlEqxVHRKYVz9tWMOVr5r+O3btcdbzP42iu8Z+3mc=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_build_page_empty_components>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48dc70>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$RhUbqg4ZjPd5hSu122k3Zd$g1BlEqxVHRKYVz9tWMOVr5r+O3btcdbzP42iu8Z+3mc=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ ViewsTestCase.test_build_page_mixed_builds __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4e6ff0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$qc8S1qpInMRzkEkxX0i9IC$PUfKc6t0n2f1NVQ2jlF0FcNdgS/3G/SF3DNq3NIGtA4=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4e6ff0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee0f80>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$qc8S1qpInMRzkEkxX0i9IC$PUfKc6t0n2f1NVQ2jlF0FcNdgS/3G/SF3DNq3NIGtA4=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_build_page_mixed_builds>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee0f80>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$qc8S1qpInMRzkEkxX0i9IC$PUfKc6t0n2f1NVQ2jlF0FcNdgS/3G/SF3DNq3NIGtA4=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____________ ViewsTestCase.test_build_page_redirect_unauthenticated ____________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4e7620>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$fmTCoN2170IlcJxFDiVACo$rX6C20WWr587qIEVvRBv4rdJgqOg3NoEmmCWuqyIL5w=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4e7620>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1f40>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$fmTCoN2170IlcJxFDiVACo$rX6C20WWr587qIEVvRBv4rdJgqOg3NoEmmCWuqyIL5w=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_build_page_redirect_unauthenticated>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1f40>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$fmTCoN2170IlcJxFDiVACo$rX6C20WWr587qIEVvRBv4rdJgqOg3NoEmmCWuqyIL5w=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________ ViewsTestCase.test_build_page_special_characters _______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4e7200>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$Cyex0Z49xtHW1FAkagjOf8$JHicQe1Md7TWDPHo4p/wDf56F+nblXiZdROuJ6Hbbog=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4e7200>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2600>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$Cyex0Z49xtHW1FAkagjOf8$JHicQe1Md7TWDPHo4p/wDf56F+nblXiZdROuJ6Hbbog=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_build_page_special_characters>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2600>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$Cyex0Z49xtHW1FAkagjOf8$JHicQe1Md7TWDPHo4p/wDf56F+nblXiZdROuJ6Hbbog=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______________________ ViewsTestCase.test_build_page_view ______________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4b4e30>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$kLPj17hgJ6uWdjs4ltPa2W$Mt68r3oSNWEBTmyjeIgybVKdEnqcJ4PU9MB0ZGDZKhM=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4b4e30>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2180>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$kLPj17hgJ6uWdjs4ltPa2W$Mt68r3oSNWEBTmyjeIgybVKdEnqcJ4PU9MB0ZGDZKhM=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_build_page_view>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2180>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$kLPj17hgJ6uWdjs4ltPa2W$Mt68r3oSNWEBTmyjeIgybVKdEnqcJ4PU9MB0ZGDZKhM=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ ViewsTestCase.test_build_page_with_builds ___________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4b62a0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$fA3fgsUMKIxelDrpC8RcNw$iz2atzbRKNYP9VcRaWzjitolxusF8txGrAV7goz1Xkk=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4b62a0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee30b0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$fA3fgsUMKIxelDrpC8RcNw$iz2atzbRKNYP9VcRaWzjitolxusF8txGrAV7goz1Xkk=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_build_page_with_builds>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee30b0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$fA3fgsUMKIxelDrpC8RcNw$iz2atzbRKNYP9VcRaWzjitolxusF8txGrAV7goz1Xkk=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______________ ViewsTestCase.test_cart_redirects_unauthenticated _______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4b6e40>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$v78UQGEeDNb9aPy6WgQ8RU$vAdB0F3/IDB7CRy4Rl5ZQ5h0kFPg1V8Adr0weibyEc4=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4b6e40>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee31d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$v78UQGEeDNb9aPy6WgQ8RU$vAdB0F3/IDB7CRy4Rl5ZQ5h0kFPg1V8Adr0weibyEc4=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_cart_redirects_unauthenticated>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee31d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$v78UQGEeDNb9aPy6WgQ8RU$vAdB0F3/IDB7CRy4Rl5ZQ5h0kFPg1V8Adr0weibyEc4=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________________ ViewsTestCase.test_delete_another_users_build _________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4cdb80>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$xDPkHvZIE0MOzZbzmRgpdT$ozZslEqkrFxLSy6xpBBi7sS2IOTJ+XwFFzsh0ijdBaA=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4cdb80>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1130>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$xDPkHvZIE0MOzZbzmRgpdT$ozZslEqkrFxLSy6xpBBi7sS2IOTJ+XwFFzsh0ijdBaA=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_delete_another_users_build>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1130>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$xDPkHvZIE0MOzZbzmRgpdT$ozZslEqkrFxLSy6xpBBi7sS2IOTJ+XwFFzsh0ijdBaA=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________________ ViewsTestCase.test_delete_build ________________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4ce3f0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$VbXBsEYZqPRJYBW2vhRpFj$5nvpOOhqnLYdIJBxjsasPj9jn5U1JxT7PTIMFYXYFeY=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4ce3f0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1e20>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$VbXBsEYZqPRJYBW2vhRpFj$5nvpOOhqnLYdIJBxjsasPj9jn5U1JxT7PTIMFYXYFeY=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_delete_build>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1e20>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$VbXBsEYZqPRJYBW2vhRpFj$5nvpOOhqnLYdIJBxjsasPj9jn5U1JxT7PTIMFYXYFeY=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________ ViewsTestCase.test_delete_build_unauthenticated ________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2daf12d20>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$5cONOx8rwqr2PxF3B48IM6$rICxtEX4RT5W7wXs4n46DKo6XctExiIQmHGBXx8Kfvk=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2daf12d20>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee19a0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$5cONOx8rwqr2PxF3B48IM6$rICxtEX4RT5W7wXs4n46DKo6XctExiIQmHGBXx8Kfvk=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_delete_build_unauthenticated>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee19a0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$5cONOx8rwqr2PxF3B48IM6$rICxtEX4RT5W7wXs4n46DKo6XctExiIQmHGBXx8Kfvk=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________________ ViewsTestCase.test_delete_nonexistent_build __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2daf13d10>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$4vQ5QsZjcF0qR84sRBMk79$0oxa0U/J7M+iDzq22X8dgL3Vv012PX2+N2PF7sNGzgA=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2daf13d10>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3020>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$4vQ5QsZjcF0qR84sRBMk79$0oxa0U/J7M+iDzq22X8dgL3Vv012PX2+N2PF7sNGzgA=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_delete_nonexistent_build>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3020>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$4vQ5QsZjcF0qR84sRBMk79$0oxa0U/J7M+iDzq22X8dgL3Vv012PX2+N2PF7sNGzgA=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______________________ ViewsTestCase.test_empty_cart_view ______________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2daf12ea0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$GbJsiZjZsiB1BupOdXFXy4$kj2UblkUZUPtBnjCOHFPt/SXNdaeqJtAedh69ngV9Zs=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2daf12ea0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3380>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$GbJsiZjZsiB1BupOdXFXy4$kj2UblkUZUPtBnjCOHFPt/SXNdaeqJtAedh69ngV9Zs=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_empty_cart_view>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3380>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$GbJsiZjZsiB1BupOdXFXy4$kj2UblkUZUPtBnjCOHFPt/SXNdaeqJtAedh69ngV9Zs=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________________________ ViewsTestCase.test_home_view _________________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4cfc20>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$uwo5PsSxWUJneVdL2jpAGk$s8VBcSZapl/ezzQnvF0yZJKm1kOYOhjXd+D5kcv+sx0=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4cfc20>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48dc70>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$uwo5PsSxWUJneVdL2jpAGk$s8VBcSZapl/ezzQnvF0yZJKm1kOYOhjXd+D5kcv+sx0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_home_view>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48dc70>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$uwo5PsSxWUJneVdL2jpAGk$s8VBcSZapl/ezzQnvF0yZJKm1kOYOhjXd+D5kcv+sx0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________________________ ViewsTestCase.test_index_view _________________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4b66f0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$j3m6mNSgboqBRsGqw0Flm0$jmWunvyGIsUCSt2U4193//L2L4+Tk4j0WoWKjyAshiA=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4b66f0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48d9a0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$j3m6mNSgboqBRsGqw0Flm0$jmWunvyGIsUCSt2U4193//L2L4+Tk4j0WoWKjyAshiA=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_index_view>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48d9a0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$j3m6mNSgboqBRsGqw0Flm0$jmWunvyGIsUCSt2U4193//L2L4+Tk4j0WoWKjyAshiA=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________________ ViewsTestCase.test_invalid_login _______________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4e43b0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$KMwqP1qxQCheJmOm5ePxkL$kk2Gt60Qm0DIUc/zJIfKhIhrFCTZI6iG3aDcCmdF5yE=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4e43b0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee0f80>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$KMwqP1qxQCheJmOm5ePxkL$kk2Gt60Qm0DIUc/zJIfKhIhrFCTZI6iG3aDcCmdF5yE=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_invalid_login>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee0f80>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$KMwqP1qxQCheJmOm5ePxkL$kk2Gt60Qm0DIUc/zJIfKhIhrFCTZI6iG3aDcCmdF5yE=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________________________ ViewsTestCase.test_login_view _________________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4aa150>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$lt3uO4w3WSPAKPS0icDS0u$1xx+sagZJzZl433tZx2cLv6srqZQgZ+IvAZ83zzV6Ek=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4aa150>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee28d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$lt3uO4w3WSPAKPS0icDS0u$1xx+sagZJzZl433tZx2cLv6srqZQgZ+IvAZ83zzV6Ek=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_login_view>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee28d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$lt3uO4w3WSPAKPS0icDS0u$1xx+sagZJzZl433tZx2cLv6srqZQgZ+IvAZ83zzV6Ek=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______________________ ViewsTestCase.test_login_view_get _______________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db300140>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$L05KufIGBSbdSEi7howlWt$R892GxbI8qNt7b2kcX2JnYPO8ybuUpt4ptc2uMNksAc=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db300140>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2de0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$L05KufIGBSbdSEi7howlWt$R892GxbI8qNt7b2kcX2JnYPO8ybuUpt4ptc2uMNksAc=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_login_view_get>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2de0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$L05KufIGBSbdSEi7howlWt$R892GxbI8qNt7b2kcX2JnYPO8ybuUpt4ptc2uMNksAc=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____________________ ViewsTestCase.test_logout_redirects ______________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3028a0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$MYLibUwNQYgaCSNz2tgaCi$nAksa0Ng50FB7J7pik3BqMuiNKSyua0JXjb2jDN3uc4=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3028a0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3020>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$MYLibUwNQYgaCSNz2tgaCi$nAksa0Ng50FB7J7pik3BqMuiNKSyua0JXjb2jDN3uc4=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_logout_redirects>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3020>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$MYLibUwNQYgaCSNz2tgaCi$nAksa0Ng50FB7J7pik3BqMuiNKSyua0JXjb2jDN3uc4=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________________________ ViewsTestCase.test_logout_view ________________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db300350>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$QwuqYAISEiBWPJedYrNtIC$W6FH566XkToEZakQ8QSgquL/PgL8RBi6K6qcaR8VB4w=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db300350>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2b10>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$QwuqYAISEiBWPJedYrNtIC$W6FH566XkToEZakQ8QSgquL/PgL8RBi6K6qcaR8VB4w=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_logout_view>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2b10>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$QwuqYAISEiBWPJedYrNtIC$W6FH566XkToEZakQ8QSgquL/PgL8RBi6K6qcaR8VB4w=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ ViewsTestCase.test_logout_while_logged_out __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d5730>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$F7cnCyN3gnnlRmfOG9QOYd$Sp4jv58w+F6Y3I5nOVQ+U0zA6jREUH4N26IT7XYAUKY=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d5730>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3410>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$F7cnCyN3gnnlRmfOG9QOYd$Sp4jv58w+F6Y3I5nOVQ+U0zA6jREUH4N26IT7XYAUKY=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_logout_while_logged_out>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3410>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$F7cnCyN3gnnlRmfOG9QOYd$Sp4jv58w+F6Y3I5nOVQ+U0zA6jREUH4N26IT7XYAUKY=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____________________ ViewsTestCase.test_part_browser_view _____________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d5a30>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$HLn54XWqoG9Hugq42pkfYo$1Yt7jTXR+2bZXNJPMchyE7X3/Z/1ubXZPrE/BqDaAe8=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d5a30>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1880>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$HLn54XWqoG9Hugq42pkfYo$1Yt7jTXR+2bZXNJPMchyE7X3/Z/1ubXZPrE/BqDaAe8=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_part_browser_view>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1880>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$HLn54XWqoG9Hugq42pkfYo$1Yt7jTXR+2bZXNJPMchyE7X3/Z/1ubXZPrE/BqDaAe8=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______________________ ViewsTestCase.test_pre_built_page _______________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d6900>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$uqk7JL8euHPT3WxwsMXmzD$ZAeSC2h2m2S9KeUmyf9GIdyd1wEtQUC0cVkQd4qAFkw=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d6900>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3ec0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$uqk7JL8euHPT3WxwsMXmzD$ZAeSC2h2m2S9KeUmyf9GIdyd1wEtQUC0cVkQd4qAFkw=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_pre_built_page>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3ec0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$uqk7JL8euHPT3WxwsMXmzD$ZAeSC2h2m2S9KeUmyf9GIdyd1wEtQUC0cVkQd4qAFkw=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______________ ViewsTestCase.test_profile_creation_on_user_signup ______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db31fd10>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$dSf85gIdQvhcCva6RwFuyC$iWAMbJP5GJMP+u9TXEH5fZnA7ym/sNEJ4//n5jMd66U=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db31fd10>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2690>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$dSf85gIdQvhcCva6RwFuyC$iWAMbJP5GJMP+u9TXEH5fZnA7ym/sNEJ4//n5jMd66U=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_profile_creation_on_user_signup>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2690>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$dSf85gIdQvhcCva6RwFuyC$iWAMbJP5GJMP+u9TXEH5fZnA7ym/sNEJ4//n5jMd66U=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___________________ ViewsTestCase.test_redirect_after_login ____________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db31d970>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$lAKAXwNDPR741MgnXgkZm7$L/5S13xyoLZh4nOuZbAKluJo7NLiXpNE4OqbARt0Km8=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db31d970>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3770>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$lAKAXwNDPR741MgnXgkZm7$L/5S13xyoLZh4nOuZbAKluJo7NLiXpNE4OqbARt0Km8=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_redirect_after_login>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3770>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$lAKAXwNDPR741MgnXgkZm7$L/5S13xyoLZh4nOuZbAKluJo7NLiXpNE4OqbARt0Km8=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____________________ ViewsTestCase.test_register_view_get _____________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db31d4c0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$JDXaULGXMHe0j0EnAoB863$6jZHgtbJOyvaXcv7ztHGZHMhcgIiiGim9RvljA8vQKI=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db31d4c0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3800>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$JDXaULGXMHe0j0EnAoB863$6jZHgtbJOyvaXcv7ztHGZHMhcgIiiGim9RvljA8vQKI=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_register_view_get>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3800>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$JDXaULGXMHe0j0EnAoB863$6jZHgtbJOyvaXcv7ztHGZHMhcgIiiGim9RvljA8vQKI=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____________________ ViewsTestCase.test_remove_from_build _____________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2daf13320>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$RLaP9YTAzF15pCaJcQcrNC$rUSbLBsUATeKdR5BFoc/CctWFNlYn/3sCoUmx3ch9kw=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2daf13320>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48f2f0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$RLaP9YTAzF15pCaJcQcrNC$rUSbLBsUATeKdR5BFoc/CctWFNlYn/3sCoUmx3ch9kw=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_remove_from_build>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48f2f0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$RLaP9YTAzF15pCaJcQcrNC$rUSbLBsUATeKdR5BFoc/CctWFNlYn/3sCoUmx3ch9kw=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________ ViewsTestCase.test_remove_nonexistent_component ________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d66c0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$rh6BasNMfafo2wk09e4Oab$K/Fl1Z+Z2AF1uOBlYrctf/iiPa0yZcWgiIeOEVgdyd4=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3d66c0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48dc70>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$rh6BasNMfafo2wk09e4Oab$K/Fl1Z+Z2AF1uOBlYrctf/iiPa0yZcWgiIeOEVgdyd4=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_remove_nonexistent_component>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48dc70>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$rh6BasNMfafo2wk09e4Oab$K/Fl1Z+Z2AF1uOBlYrctf/iiPa0yZcWgiIeOEVgdyd4=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________ ViewsTestCase.test_remove_nonexistent_component_from_build __________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db300aa0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$rQ58QdGEbNvAQGHCRtwgBB$+ifJGAEngKWJVWuxiNFL1p2xwjVMe7F54OF/3iSYp98=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db300aa0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1eb0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$rQ58QdGEbNvAQGHCRtwgBB$+ifJGAEngKWJVWuxiNFL1p2xwjVMe7F54OF/3iSYp98=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_remove_nonexistent_component_from_build>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1eb0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$rQ58QdGEbNvAQGHCRtwgBB$+ifJGAEngKWJVWuxiNFL1p2xwjVMe7F54OF/3iSYp98=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___________________ ViewsTestCase.test_save_build_empty_name ___________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4e5760>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$WpGth6xG1GSq0Mkz8spTBj$T9w1x+cC6dNQ72OY0Q7kHUiqzA3itEZNEBL1/X/dwBU=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4e5760>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3530>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$WpGth6xG1GSq0Mkz8spTBj$T9w1x+cC6dNQ72OY0Q7kHUiqzA3itEZNEBL1/X/dwBU=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_save_build_empty_name>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3530>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$WpGth6xG1GSq0Mkz8spTBj$T9w1x+cC6dNQ72OY0Q7kHUiqzA3itEZNEBL1/X/dwBU=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ ViewsTestCase.test_save_build_missing_data __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4ce900>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$XDnT7VJQ9CFUldp5irJDxO$ZC5nRH/qgL5M3ESEpYIx4fN4R9aZHZBc3MIt1P561J0=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db4ce900>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee23c0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$XDnT7VJQ9CFUldp5irJDxO$ZC5nRH/qgL5M3ESEpYIx4fN4R9aZHZBc3MIt1P561J0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_save_build_missing_data>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee23c0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$XDnT7VJQ9CFUldp5irJDxO$ZC5nRH/qgL5M3ESEpYIx4fN4R9aZHZBc3MIt1P561J0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________ ViewsTestCase.test_search_pc_parts_empty_results _______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db325370>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$jdKroNa4UTSZPo3hxtbgEy$G2ZDrsczLNb+n9Y6nhSVCDEMp7hSOjfq+tO93v6CrTA=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db325370>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2330>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$jdKroNa4UTSZPo3hxtbgEy$G2ZDrsczLNb+n9Y6nhSVCDEMp7hSOjfq+tO93v6CrTA=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_search_pc_parts_empty_results>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2330>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$jdKroNa4UTSZPo3hxtbgEy$G2ZDrsczLNb+n9Y6nhSVCDEMp7hSOjfq+tO93v6CrTA=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________ ViewsTestCase.test_search_pc_parts_invalid_query _______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db325d60>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$obuOQXMNsxEkuf3qNcjHdq$QtiU7PArv9ifRHIi6zYM695Pse6GiKpuhuPbHEUdhHU=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db325d60>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee0290>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$obuOQXMNsxEkuf3qNcjHdq$QtiU7PArv9ifRHIi6zYM695Pse6GiKpuhuPbHEUdhHU=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_search_pc_parts_invalid_query>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee0290>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$obuOQXMNsxEkuf3qNcjHdq$QtiU7PArv9ifRHIi6zYM695Pse6GiKpuhuPbHEUdhHU=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________________ ViewsTestCase.test_search_pc_parts_no_query __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db2fcf50>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$CqG75cLs4LcUZzCqp4hflS$KHoI3bUEWs1kwW2Xy8V8AHbR132i4+h+83dNHOl8Wu4=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db2fcf50>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1910>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$CqG75cLs4LcUZzCqp4hflS$KHoI3bUEWs1kwW2Xy8V8AHbR132i4+h+83dNHOl8Wu4=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_search_pc_parts_no_query>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1910>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$CqG75cLs4LcUZzCqp4hflS$KHoI3bUEWs1kwW2Xy8V8AHbR132i4+h+83dNHOl8Wu4=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________________ ViewsTestCase.test_search_pc_parts_with_query _________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db2fefc0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ttn1js7G3dxky7IcTfJsrX$SIVJLdvVRtP8sqfvpVQdGYXL7/iOyMrNGULQXNi+T/Y=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db2fefc0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee31d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ttn1js7G3dxky7IcTfJsrX$SIVJLdvVRtP8sqfvpVQdGYXL7/iOyMrNGULQXNi+T/Y=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_search_pc_parts_with_query>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee31d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ttn1js7G3dxky7IcTfJsrX$SIVJLdvVRtP8sqfvpVQdGYXL7/iOyMrNGULQXNi+T/Y=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____________________ ViewsTestCase.test_unauthorized_access ____________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db2fd250>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$Vlj0NH9RNB1JQ4A2ezPtu7$EtG7SjIb3U/Nnqdx/WmkNV5KPGmQXk8pehWquoZ147g=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db2fd250>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee15b0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$Vlj0NH9RNB1JQ4A2ezPtu7$EtG7SjIb3U/Nnqdx/WmkNV5KPGmQXk8pehWquoZ147g=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_unauthorized_access>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee15b0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$Vlj0NH9RNB1JQ4A2ezPtu7$EtG7SjIb3U/Nnqdx/WmkNV5KPGmQXk8pehWquoZ147g=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________________________ ViewsTestCase.test_view_build _________________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3ae9c0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$Fj4Dp7uVGqAFgz57uv7a5S$TTTXhx1L0Toi4XottH/yzTrv1txZJYBlcwPrsV3JAQE=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3ae9c0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee28d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$Fj4Dp7uVGqAFgz57uv7a5S$TTTXhx1L0Toi4XottH/yzTrv1txZJYBlcwPrsV3JAQE=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_view_build>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee28d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$Fj4Dp7uVGqAFgz57uv7a5S$TTTXhx1L0Toi4XottH/yzTrv1txZJYBlcwPrsV3JAQE=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ ViewsTestCase.test_view_cart_authenticated __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3ae870>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ZA4Bry6jXXiD9VFxmJREJV$77iKJ8xzKToeBq2OenEIkdVrFYQC0zBZ4/RPXk/Qn78=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3ae870>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2b10>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ZA4Bry6jXXiD9VFxmJREJV$77iKJ8xzKToeBq2OenEIkdVrFYQC0zBZ4/RPXk/Qn78=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_view_cart_authenticated>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2b10>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$ZA4Bry6jXXiD9VFxmJREJV$77iKJ8xzKToeBq2OenEIkdVrFYQC0zBZ4/RPXk/Qn78=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________________ ViewsTestCase.test_view_cart_unauthenticated _________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3aeb70>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$IN5leSFah2refUhve8e5SP$jvnDOwlKhVy6HypJw4Z8HyIMoHzWvrTB9HmNsBbRKQM=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3aeb70>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1370>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$IN5leSFah2refUhve8e5SP$jvnDOwlKhVy6HypJw4Z8HyIMoHzWvrTB9HmNsBbRKQM=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_view_cart_unauthenticated>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee1370>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$IN5leSFah2refUhve8e5SP$jvnDOwlKhVy6HypJw4Z8HyIMoHzWvrTB9HmNsBbRKQM=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ ViewsTestCase.test_view_nonexistent_build ___________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3aef60>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$s6U0gHrbzRbJT9ZXSpdkec$RHd0fPB8vkkD6dqBN8bYArLQge2jDQG2JLkrWJ72Z7k=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3aef60>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48dc70>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$s6U0gHrbzRbJT9ZXSpdkec$RHd0fPB8vkkD6dqBN8bYArLQge2jDQG2JLkrWJ72Z7k=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_all_views.test_views.ViewsTestCase testMethod=test_view_nonexistent_build>

    def setUp(self):
        """
        Set up test client and test user only once.
        """
        self.client = Client()
>       self.user = User.objects.create_user(username="testuser", password="password123")

home/tests/test_all_views/test_views.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db48dc70>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$s6U0gHrbzRbJT9ZXSpdkec$RHd0fPB8vkkD6dqBN8bYArLQge2jDQG2JLkrWJ72Z7k=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______ CompatibilityServiceModelTests.test_motherboard_cpu_compatibility _______

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3ae210>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$bn1hmOzPg5HqFwFZMkRAnU$0dGotfTh3fDsilRt3Q4erfUccVyYv8bl0L/N9FXVs0U=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3ae210>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee28d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$bn1hmOzPg5HqFwFZMkRAnU$0dGotfTh3fDsilRt3Q4erfUccVyYv8bl0L/N9FXVs0U=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_builds.CompatibilityServiceModelTests testMethod=test_motherboard_cpu_compatibility>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_builds.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee28d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$bn1hmOzPg5HqFwFZMkRAnU$0dGotfTh3fDsilRt3Q4erfUccVyYv8bl0L/N9FXVs0U=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
______ CompatibilityServiceModelTests.test_motherboard_ram_compatibility _______

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db324350>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$IERM0rbbHiVvk4kJDZpTWx$ZPgQmKX4UW6KC8O+0vAc1877aroNtTYfWBZqpxsd4Wk=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db324350>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2cc0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$IERM0rbbHiVvk4kJDZpTWx$ZPgQmKX4UW6KC8O+0vAc1877aroNtTYfWBZqpxsd4Wk=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_builds.CompatibilityServiceModelTests testMethod=test_motherboard_ram_compatibility>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_builds.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2cc0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$IERM0rbbHiVvk4kJDZpTWx$ZPgQmKX4UW6KC8O+0vAc1877aroNtTYfWBZqpxsd4Wk=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____ CompatibilityServiceModelTests.test_motherboard_storage_compatibility _____

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3252b0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$90aSnzOfwoQaxyppXeB0uU$eJ3IysjGa3jRP2ad8I3SCdKb+tbYb//T2mbiFYo2QQ0=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3252b0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3410>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$90aSnzOfwoQaxyppXeB0uU$eJ3IysjGa3jRP2ad8I3SCdKb+tbYb//T2mbiFYo2QQ0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_builds.CompatibilityServiceModelTests testMethod=test_motherboard_storage_compatibility>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_builds.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee3410>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$90aSnzOfwoQaxyppXeB0uU$eJ3IysjGa3jRP2ad8I3SCdKb+tbYb//T2mbiFYo2QQ0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___________________ MotherboardModelTests.test_cpu_creation ____________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da735a90>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$PXJEKYoe9s6qH6BdsV7MxP$CpC03yqKMdQ2ksqA281/OKB78rwkQR+Q+a6wDAZWTEQ=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da735a90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307ec0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$PXJEKYoe9s6qH6BdsV7MxP$CpC03yqKMdQ2ksqA281/OKB78rwkQR+Q+a6wDAZWTEQ=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_cpu_creation>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307ec0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$PXJEKYoe9s6qH6BdsV7MxP$CpC03yqKMdQ2ksqA281/OKB78rwkQR+Q+a6wDAZWTEQ=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
____________ MotherboardModelTests.test_default_max_memory_capacity ____________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dadebd40>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$tId9vUreLpks7cYPKMUgZP$OJgIGWWDpFaxDW9gVM9snl6KQWOuZv5tJgybacKZJyA=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dadebd40>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ccdd0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$tId9vUreLpks7cYPKMUgZP$OJgIGWWDpFaxDW9gVM9snl6KQWOuZv5tJgybacKZJyA=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_default_max_memory_capacity>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ccdd0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$tId9vUreLpks7cYPKMUgZP$OJgIGWWDpFaxDW9gVM9snl6KQWOuZv5tJgybacKZJyA=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___________________ MotherboardModelTests.test_default_price ___________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da7abb00>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$V1qn2Y5zj2PTwQ87Wpredi$z1e7t9OnFB+uCAhpnFgxNovYKdWmyEg5IiuktELofCc=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da7abb00>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$V1qn2Y5zj2PTwQ87Wpredi$z1e7t9OnFB+uCAhpnFgxNovYKdWmyEg5IiuktELofCc=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_default_price>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db673890>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$V1qn2Y5zj2PTwQ87Wpredi$z1e7t9OnFB+uCAhpnFgxNovYKdWmyEg5IiuktELofCc=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____________ MotherboardModelTests.test_incompatible_ram_capacity _____________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393f20>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$qL3a8uBi3ahIYRlVsSeSXF$vIv/wKMYZYeiq/8SsCn+5DH96Qn5D2WySDVR50XVUOo=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db393f20>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2330>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$qL3a8uBi3ahIYRlVsSeSXF$vIv/wKMYZYeiq/8SsCn+5DH96Qn5D2WySDVR50XVUOo=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_incompatible_ram_capacity>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee2330>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$qL3a8uBi3ahIYRlVsSeSXF$vIv/wKMYZYeiq/8SsCn+5DH96Qn5D2WySDVR50XVUOo=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______________ MotherboardModelTests.test_incompatible_ram_type _______________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3265d0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$kqkcNskKUFhJhKQRoZ4ucT$9oWo0ssRi8O5vM+7BxQ0Y/l4dvkKXhgzIxob0bCnQy0=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db3265d0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$kqkcNskKUFhJhKQRoZ4ucT$9oWo0ssRi8O5vM+7BxQ0Y/l4dvkKXhgzIxob0bCnQy0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_incompatible_ram_type>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2daee04d0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$kqkcNskKUFhJhKQRoZ4ucT$9oWo0ssRi8O5vM+7BxQ0Y/l4dvkKXhgzIxob0bCnQy0=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________ MotherboardModelTests.test_max_ram_capacity_compatibility ___________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da7d0d70>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$bQCw5FDTJGoUTOdHzA18bk$3Vrn7v5oMRUGa8xeoGcB1p+pjmR6BMMn2vh5Eq6IT8Q=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da7d0d70>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db304950>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$bQCw5FDTJGoUTOdHzA18bk$3Vrn7v5oMRUGa8xeoGcB1p+pjmR6BMMn2vh5Eq6IT8Q=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_max_ram_capacity_compatibility>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db304950>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$bQCw5FDTJGoUTOdHzA18bk$3Vrn7v5oMRUGa8xeoGcB1p+pjmR6BMMn2vh5Eq6IT8Q=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________ MotherboardModelTests.test_min_ram_capacity_compatibility ___________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db56ba10>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$8oeUOuXXGzEbl10FvbXuMM$vjr4wOmLjEUNBo2Vr386x85gJ+qlq5qrs9p05VF4Kpk=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db56ba10>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db306690>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$8oeUOuXXGzEbl10FvbXuMM$vjr4wOmLjEUNBo2Vr386x85gJ+qlq5qrs9p05VF4Kpk=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_min_ram_capacity_compatibility>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db306690>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$8oeUOuXXGzEbl10FvbXuMM$vjr4wOmLjEUNBo2Vr386x85gJ+qlq5qrs9p05VF4Kpk=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___________ MotherboardModelTests.test_motherboard_cpu_compatibility ___________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da735a90>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$SPSTOSd4miuapsXFBfUffg$wK/rrA6QUyyWP03wOzgSTXUw8SKtvgPhlJGiYzAEHJQ=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da735a90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307c80>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$SPSTOSd4miuapsXFBfUffg$wK/rrA6QUyyWP03wOzgSTXUw8SKtvgPhlJGiYzAEHJQ=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_motherboard_cpu_compatibility>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307c80>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$SPSTOSd4miuapsXFBfUffg$wK/rrA6QUyyWP03wOzgSTXUw8SKtvgPhlJGiYzAEHJQ=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_______ MotherboardModelTests.test_motherboard_has_supported_ram_speeds ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da737830>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$22hgSD8E9SFOU5w3uVkkex$oAzOrbZSl3v2t3HymbZj/jSG1NsgzdtuOFz7wml4IpI=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da737830>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305880>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$22hgSD8E9SFOU5w3uVkkex$oAzOrbZSl3v2t3HymbZj/jSG1NsgzdtuOFz7wml4IpI=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_motherboard_has_supported_ram_speeds>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db305880>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$22hgSD8E9SFOU5w3uVkkex$oAzOrbZSl3v2t3HymbZj/jSG1NsgzdtuOFz7wml4IpI=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
________ MotherboardModelTests.test_motherboard_has_supported_ram_types ________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e000>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$nohV0tIOZiSafsNFSqyy6Q$vC9WLAnsfMxwFTqmfUz6hTJAwaxtg819sNfJ7jyBiIU=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2da72e000>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db306690>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$nohV0tIOZiSafsNFSqyy6Q$vC9WLAnsfMxwFTqmfUz6hTJAwaxtg819sNfJ7jyBiIU=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_motherboard_has_supported_ram_types>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db306690>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$nohV0tIOZiSafsNFSqyy6Q$vC9WLAnsfMxwFTqmfUz6hTJAwaxtg819sNfJ7jyBiIU=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___________ MotherboardModelTests.test_motherboard_ram_compatibility ___________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dadeaa80>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$K6Wr0o8rnr9lsgXIkTCm0l$Bd4FdiRl2YdSMTV2ClfaLsB51ees7xpduWJNsa318Tw=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dadeaa80>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$K6Wr0o8rnr9lsgXIkTCm0l$Bd4FdiRl2YdSMTV2ClfaLsB51ees7xpduWJNsa318Tw=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_motherboard_ram_compatibility>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db307530>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$K6Wr0o8rnr9lsgXIkTCm0l$Bd4FdiRl2YdSMTV2ClfaLsB51ees7xpduWJNsa318Tw=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________ MotherboardModelTests.test_motherboard_storage_compatibility _________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dade9460>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$u0rpXpg66oSshQXfzYjdZL$BJ7j87vPUOaBHl1a2UdvEGCUcx/tauoYTsQJFUXs+Zc=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dade9460>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce7b0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$u0rpXpg66oSshQXfzYjdZL$BJ7j87vPUOaBHl1a2UdvEGCUcx/tauoYTsQJFUXs+Zc=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_motherboard_storage_compatibility>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce7b0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$u0rpXpg66oSshQXfzYjdZL$BJ7j87vPUOaBHl1a2UdvEGCUcx/tauoYTsQJFUXs+Zc=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
__________________ MotherboardModelTests.test_motherboard_str __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dadb7c50>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$GD1XBrrKWYlv4CoDC4i5WX$ZLUWXuEjRGGR4vceo1tRI37Wd4yM8j6v7zkGTd2b49k=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dadb7c50>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce9f0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$GD1XBrrKWYlv4CoDC4i5WX$ZLUWXuEjRGGR4vceo1tRI37Wd4yM8j6v7zkGTd2b49k=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_motherboard_str>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7ce9f0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$GD1XBrrKWYlv4CoDC4i5WX$ZLUWXuEjRGGR4vceo1tRI37Wd4yM8j6v7zkGTd2b49k=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_________________ MotherboardModelTests.test_profile_creation __________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dadb63f0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$7nOysGUbUnTPqsBlYritTu$ymN8iOrAJ85T9EQZPI09TXyx+8Vk1BLMTRLeumH0yjg=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dadb63f0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cea80>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$7nOysGUbUnTPqsBlYritTu$ymN8iOrAJ85T9EQZPI09TXyx+8Vk1BLMTRLeumH0yjg=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_motherboards.MotherboardModelTests testMethod=test_profile_creation>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_motherboards.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2da7cea80>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$7nOysGUbUnTPqsBlYritTu$ymN8iOrAJ85T9EQZPI09TXyx+8Vk1BLMTRLeumH0yjg=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
___ RAMNumberOfModulesTestCase.test_RAMNumberOfModules_object_fields_values ____

self = <home.tests.test_models.test_ram_attributes.RAMNumberOfModulesTestCase testMethod=test_RAMNumberOfModules_object_fields_values>

    def test_RAMNumberOfModules_object_fields_values(self):
>       testObject = RAMNumberOfModules.objects.get(number_of_modules=2)

home/tests/test_models/test_ram_attributes.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<RAMNumberOfModules: 1>, <RAMNumberOfModules: 2>, <RAMNumberOfModules: 4>, <RAMNumberOfModules: 8>, <RAMNumberOfModules: 2>, <RAMNumberOfModules: 4>]>
args = (), kwargs = {'number_of_modules': 2}
clone = <QuerySet [<RAMNumberOfModules: 2>, <RAMNumberOfModules: 2>]>
limit = 21, num = 2

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        if self.query.combinator and (args or kwargs):
            raise NotSupportedError(
                "Calling QuerySet.get(...) with filters after %s() is not "
                "supported." % self.query.combinator
            )
        clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        limit = None
        if (
            not clone.query.select_for_update
            or connections[clone.db].features.supports_select_for_update_with_limit
        ):
            limit = MAX_GET_RESULTS
            clone.query.set_limits(high=limit)
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." % self.model._meta.object_name
            )
>       raise self.model.MultipleObjectsReturned(
            "get() returned more than one %s -- it returned %s!"
            % (
                self.model._meta.object_name,
                num if not limit or num < limit else "more than %s" % (limit - 1),
            )
        )
E       home.models.RAMNumberOfModules.MultipleObjectsReturned: get() returned more than one RAMNumberOfModules -- it returned 2!

optimal/lib/python3.12/site-packages/django/db/models/query.py:652: MultipleObjectsReturned
_ RAMNumberOfModulesTestCase.test_RAMNumberOfModules_object_fields_values_integer _

self = <home.tests.test_models.test_ram_attributes.RAMNumberOfModulesTestCase testMethod=test_RAMNumberOfModules_object_fields_values_integer>

    def test_RAMNumberOfModules_object_fields_values_integer(self):
>       testObject = RAMNumberOfModules.objects.get(number_of_modules=2)

home/tests/test_models/test_ram_attributes.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<RAMNumberOfModules: 1>, <RAMNumberOfModules: 2>, <RAMNumberOfModules: 4>, <RAMNumberOfModules: 8>, <RAMNumberOfModules: 2>, <RAMNumberOfModules: 4>]>
args = (), kwargs = {'number_of_modules': 2}
clone = <QuerySet [<RAMNumberOfModules: 2>, <RAMNumberOfModules: 2>]>
limit = 21, num = 2

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        if self.query.combinator and (args or kwargs):
            raise NotSupportedError(
                "Calling QuerySet.get(...) with filters after %s() is not "
                "supported." % self.query.combinator
            )
        clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        limit = None
        if (
            not clone.query.select_for_update
            or connections[clone.db].features.supports_select_for_update_with_limit
        ):
            limit = MAX_GET_RESULTS
            clone.query.set_limits(high=limit)
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." % self.model._meta.object_name
            )
>       raise self.model.MultipleObjectsReturned(
            "get() returned more than one %s -- it returned %s!"
            % (
                self.model._meta.object_name,
                num if not limit or num < limit else "more than %s" % (limit - 1),
            )
        )
E       home.models.RAMNumberOfModules.MultipleObjectsReturned: get() returned more than one RAMNumberOfModules -- it returned 2!

optimal/lib/python3.12/site-packages/django/db/models/query.py:652: MultipleObjectsReturned
____________________ UserProfileTests.test_profile_creation ____________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db157b90>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$FpudqhZYtlPeQ4ShCsuLVg$PGsUCoQmYJYpsuWHZ5IsMk9pMU8KE1N5Fo9xuJbHtds=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db157b90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192d50>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$FpudqhZYtlPeQ4ShCsuLVg$PGsUCoQmYJYpsuWHZ5IsMk9pMU8KE1N5Fo9xuJbHtds=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_user_profile.UserProfileTests testMethod=test_profile_creation>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_user_profile.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db192d50>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$FpudqhZYtlPeQ4ShCsuLVg$PGsUCoQmYJYpsuWHZ5IsMk9pMU8KE1N5Fo9xuJbHtds=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____________________ UserProfileTests.test_profile_signal _____________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dadebcb0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$xHSFapn5zQhDzSXDhP6Agg$b9iadi0/awyNyuto5QaPuITY2FeuzQmgM0kNn+7p87o=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2dadebcb0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db1922a0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$xHSFapn5zQhDzSXDhP6Agg$b9iadi0/awyNyuto5QaPuITY2FeuzQmgM0kNn+7p87o=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_user_profile.UserProfileTests testMethod=test_profile_signal>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_user_profile.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db1922a0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$xHSFapn5zQhDzSXDhP6Agg$b9iadi0/awyNyuto5QaPuITY2FeuzQmgM0kNn+7p87o=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError
_____________________ UserProfileTests.test_user_creation ______________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c70e0>
sql = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$gmnaQWfAoy5uLziPTQNmDh$uKaU9Bd2aLB30ZTXeMsL1bxJLZlagXnX3xmro3bf4uQ=', None, False, 'testuser', '', '', ...)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x74c2db1c70e0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db1924e0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$gmnaQWfAoy5uLziPTQNmDh$uKaU9Bd2aLB30ZTXeMsL1bxJLZlagXnX3xmro3bf4uQ=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

The above exception was the direct cause of the following exception:

self = <home.tests.test_models.test_user_profile.UserProfileTests testMethod=test_user_creation>

    def setUp(self):
>       self.user = User.objects.create_user(username='testuser', password='password')

home/tests/test_models/test_user_profile.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:162: in create_user
    return self._create_user(username, email, password, **extra_fields)
optimal/lib/python3.12/site-packages/django/contrib/auth/models.py:156: in _create_user
    user.save(using=self._db)
optimal/lib/python3.12/site-packages/django/contrib/auth/base_user.py:62: in save
    super().save(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/base.py:891: in save
    self.save_base(
optimal/lib/python3.12/site-packages/django/db/models/base.py:997: in save_base
    updated = self._save_table(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1160: in _save_table
    results = self._do_insert(
optimal/lib/python3.12/site-packages/django/db/models/base.py:1201: in _do_insert
    return manager._insert(
optimal/lib/python3.12/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
optimal/lib/python3.12/site-packages/django/db/models/query.py:1847: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
optimal/lib/python3.12/site-packages/django/db/models/sql/compiler.py:1836: in execute_sql
    cursor.execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:122: in execute
    return super().execute(sql, params)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
optimal/lib/python3.12/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
optimal/lib/python3.12/site-packages/django/db/backends/utils.py:105: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x74c2db1924e0>
query = 'INSERT INTO "auth_user" ("password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "auth_user"."id"'
params = ('pbkdf2_sha256$870000$gmnaQWfAoy5uLziPTQNmDh$uKaU9Bd2aLB30ZTXeMsL1bxJLZlagXnX3xmro3bf4uQ=', None, False, 'testuser', '', '', ...)

    def execute(self, query, params=None):
        if params is None:
            return super().execute(query)
        # Extract names if params is a mapping, i.e. "pyformat" style is used.
        param_names = list(params) if isinstance(params, Mapping) else None
        query = self.convert_query(query, param_names=param_names)
>       return super().execute(query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username

optimal/lib/python3.12/site-packages/django/db/backends/sqlite3/base.py:354: IntegrityError

---------- coverage: platform linux, python 3.12.3-final-0 -----------
Name                                                Stmts   Miss  Cover
-----------------------------------------------------------------------
Optimal_Performance_Platform/__init__.py                0      0   100%
Optimal_Performance_Platform/asgi.py                    4      4     0%
Optimal_Performance_Platform/settings.py               30      0   100%
Optimal_Performance_Platform/urls.py                    4      4     0%
Optimal_Performance_Platform/wsgi.py                    4      4     0%
home/__init__.py                                        0      0   100%
home/admin.py                                          52     10    81%
home/apps.py                                            4      0   100%
home/compatibility_service.py                          64     56    12%
home/forms.py                                           9      9     0%
home/migrations/0001_initial.py                         8      8     0%
home/migrations/__init__.py                             0      0   100%
home/models.py                                        259     50    81%
home/populate_fake_data.py                             48     48     0%
home/serializers.py                                    88     88     0%
home/tests/__init__.py                                  0      0   100%
home/tests/conftest.py                                  5      0   100%
home/tests/test_all_views/__init__.py                   0      0   100%
home/tests/test_all_views/test_views.py               185    126    32%
home/tests/test_all_views/tests.py                    142    142     0%
home/tests/test_forms.py                                0      0   100%
home/tests/test_models/__init__.py                      0      0   100%
home/tests/test_models/test_builds.py                  46     21    54%
home/tests/test_models/test_cpus.py                    71     43    39%
home/tests/test_models/test_cpusockettype.py           34     16    53%
home/tests/test_models/test_formfactor.py              34      0   100%
home/tests/test_models/test_manufacturers.py           34     16    53%
home/tests/test_models/test_microarchitecture.py       34     16    53%
home/tests/test_models/test_motherboards.py            78     43    45%
home/tests/test_models/test_ram.py                     79     52    34%
home/tests/test_models/test_ram_attributes.py         103     55    47%
home/tests/test_models/test_storage.py                 69     44    36%
home/tests/test_models/test_storage_attributes.py      59     32    46%
home/tests/test_models/test_user_profile.py            33     11    67%
home/urls.py                                           16     16     0%
home/urls_api.py                                       10     10     0%
home/views.py                                         352    352     0%
home/views_api.py                                     215    215     0%
home/views_render.py                                   31     31     0%
manage.py                                              11     11     0%
-----------------------------------------------------------------------
TOTAL                                                2215   1533    31%

=========================== short test summary info ============================
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_404_view
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_account_page_no_builds
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_account_page_view
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_add_component_missing_parameters
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_add_duplicate_component
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_add_to_build
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_add_to_build_invalid_build
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_add_to_build_missing_component
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_authenticated_page
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_build_page_empty_components
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_build_page_mixed_builds
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_build_page_redirect_unauthenticated
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_build_page_special_characters
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_build_page_view
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_build_page_with_builds
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_cart_redirects_unauthenticated
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_delete_another_users_build
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_delete_build
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_delete_build_unauthenticated
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_delete_nonexistent_build
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_empty_cart_view
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_home_view
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_index_view
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_invalid_login
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_login_view
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_login_view_get
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_logout_redirects
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_logout_view
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_logout_while_logged_out
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_part_browser_view
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_pre_built_page
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_profile_creation_on_user_signup
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_redirect_after_login
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_register_view_get
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_remove_from_build
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_remove_nonexistent_component
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_remove_nonexistent_component_from_build
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_save_build_empty_name
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_save_build_missing_data
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_search_pc_parts_empty_results
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_search_pc_parts_invalid_query
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_search_pc_parts_no_query
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_search_pc_parts_with_query
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_unauthorized_access
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_view_build
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_view_cart_authenticated
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_view_cart_unauthenticated
FAILED home/tests/test_all_views/test_views.py::ViewsTestCase::test_view_nonexistent_build
FAILED home/tests/test_models/test_builds.py::CompatibilityServiceModelTests::test_motherboard_cpu_compatibility
FAILED home/tests/test_models/test_builds.py::CompatibilityServiceModelTests::test_motherboard_ram_compatibility
FAILED home/tests/test_models/test_builds.py::CompatibilityServiceModelTests::test_motherboard_storage_compatibility
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_cpu_creation
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_default_max_memory_capacity
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_default_price
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_incompatible_ram_capacity
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_incompatible_ram_type
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_max_ram_capacity_compatibility
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_min_ram_capacity_compatibility
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_motherboard_cpu_compatibility
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_motherboard_has_supported_ram_speeds
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_motherboard_has_supported_ram_types
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_motherboard_ram_compatibility
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_motherboard_storage_compatibility
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_motherboard_str
FAILED home/tests/test_models/test_motherboards.py::MotherboardModelTests::test_profile_creation
FAILED home/tests/test_models/test_ram_attributes.py::RAMNumberOfModulesTestCase::test_RAMNumberOfModules_object_fields_values
FAILED home/tests/test_models/test_ram_attributes.py::RAMNumberOfModulesTestCase::test_RAMNumberOfModules_object_fields_values_integer
FAILED home/tests/test_models/test_user_profile.py::UserProfileTests::test_profile_creation
FAILED home/tests/test_models/test_user_profile.py::UserProfileTests::test_profile_signal
FAILED home/tests/test_models/test_user_profile.py::UserProfileTests::test_user_creation
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_CPU_cpu_id_field_label
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_CPU_manufacturer_field_label
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_CPU_microarchitecture_field_label
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_CPU_name_field_label
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_CPU_object_cpu_id_values
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_CPU_object_cpu_manufacturer_values
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_CPU_object_cpu_microarchitecture_values
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_CPU_object_cpu_socket_type_values
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_CPU_object_fields_values
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_CPU_socket_type_field_label
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_cpu_name_validation
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_cpu_str - django...
ERROR home/tests/test_models/test_cpus.py::CPUTestCase::test_unique_cpu_id - ...
ERROR home/tests/test_models/test_cpusockettype.py::CPUSocketTypeTestCase::test_CPUSocketType_name_field_label
ERROR home/tests/test_models/test_cpusockettype.py::CPUSocketTypeTestCase::test_CPUSocketType_object_fields_values
ERROR home/tests/test_models/test_cpusockettype.py::CPUSocketTypeTestCase::test_cpusockettype_name_validation
ERROR home/tests/test_models/test_cpusockettype.py::CPUSocketTypeTestCase::test_cpusockettype_str
ERROR home/tests/test_models/test_cpusockettype.py::CPUSocketTypeTestCase::test_unique_cpusockettype_name
ERROR home/tests/test_models/test_manufacturers.py::ManufacturerTestCase::test_Manufacturer_name_field_label
ERROR home/tests/test_models/test_manufacturers.py::ManufacturerTestCase::test_Manufacturer_object_fields_values
ERROR home/tests/test_models/test_manufacturers.py::ManufacturerTestCase::test_manufacturer_name_validation
ERROR home/tests/test_models/test_manufacturers.py::ManufacturerTestCase::test_manufacturer_str
ERROR home/tests/test_models/test_manufacturers.py::ManufacturerTestCase::test_unique_manufacturer_name
ERROR home/tests/test_models/test_microarchitecture.py::MicroarchitectureTestCase::test_Microarchitecture_name_field_label
ERROR home/tests/test_models/test_microarchitecture.py::MicroarchitectureTestCase::test_Microarchitecture_object_fields_values
ERROR home/tests/test_models/test_microarchitecture.py::MicroarchitectureTestCase::test_microarchitecture_name_validation
ERROR home/tests/test_models/test_microarchitecture.py::MicroarchitectureTestCase::test_microarchitecture_str
ERROR home/tests/test_models/test_microarchitecture.py::MicroarchitectureTestCase::test_unique_microarchitecture_name
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_RAM_manufacturer_field_label
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_RAM_name_field_label
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_RAM_object_fields_values
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_RAM_object_ram_id_values
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_RAM_object_ram_manufacturer_values
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_RAM_object_ram_speed_values
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_RAM_object_ram_type_values
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_RAM_ram_id_field_label
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_RAM_ram_speed_field_label
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_RAM_ram_type_field_label
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_ram_name_validation
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_ram_speed_validation
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_ram_str - django....
ERROR home/tests/test_models/test_ram.py::RAMTestCase::test_unique_ram_id - d...
ERROR home/tests/test_models/test_ram_attributes.py::RAMTypeTestCase::test_RAMType_object_fields_values
ERROR home/tests/test_models/test_ram_attributes.py::RAMTypeTestCase::test_RAMType_type_field_label
ERROR home/tests/test_models/test_ram_attributes.py::RAMTypeTestCase::test_ram_type_str
ERROR home/tests/test_models/test_ram_attributes.py::RAMTypeTestCase::test_ram_type_validation
ERROR home/tests/test_models/test_ram_attributes.py::RAMTypeTestCase::test_unique_ram_type
ERROR home/tests/test_models/test_ram_attributes.py::RAMSpeedTestCase::test_RAMSpeed_object_fields_values
ERROR home/tests/test_models/test_ram_attributes.py::RAMSpeedTestCase::test_RAMSpeed_speed_field_label
ERROR home/tests/test_models/test_ram_attributes.py::RAMSpeedTestCase::test_ram_speed_str
ERROR home/tests/test_models/test_ram_attributes.py::RAMSpeedTestCase::test_ram_speed_validation
ERROR home/tests/test_models/test_ram_attributes.py::RAMCapacityTestCase::test_RAMCapacity_capacity_field_label
ERROR home/tests/test_models/test_ram_attributes.py::RAMCapacityTestCase::test_RAMCapacity_object_fields_values
ERROR home/tests/test_models/test_ram_attributes.py::RAMCapacityTestCase::test_ram_capacity_str
ERROR home/tests/test_models/test_ram_attributes.py::RAMCapacityTestCase::test_ram_capacity_validation
ERROR home/tests/test_models/test_ram_attributes.py::RAMCapacityTestCase::test_unique_ram_capacity
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_Storage_manufacturer_field_label
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_Storage_name_field_label
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_Storage_object_fields_values
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_Storage_object_storage_capacity_values
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_Storage_object_storage_id_values
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_Storage_object_storage_manufacturer_values
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_Storage_object_storage_type_values
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_Storage_storage_id_field_label
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_Storage_storage_type_field_label
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_storage_name_validation
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_storage_str
ERROR home/tests/test_models/test_storage.py::StorageTestCase::test_unique_storage_id
ERROR home/tests/test_models/test_storage_attributes.py::StorageTypeTestCase::test_StorageType_object_fields_values
ERROR home/tests/test_models/test_storage_attributes.py::StorageTypeTestCase::test_StorageType_type_field_label
ERROR home/tests/test_models/test_storage_attributes.py::StorageTypeTestCase::test_storage_type_str
ERROR home/tests/test_models/test_storage_attributes.py::StorageTypeTestCase::test_storage_type_validation
ERROR home/tests/test_models/test_storage_attributes.py::StorageTypeTestCase::test_unique_storage_type
ERROR home/tests/test_models/test_storage_attributes.py::StorageCapacityTestCase::test_StorageCapacity_capacity_field_label
ERROR home/tests/test_models/test_storage_attributes.py::StorageCapacityTestCase::test_StorageCapacity_object_fields_values
ERROR home/tests/test_models/test_storage_attributes.py::StorageCapacityTestCase::test_storage_capacity_str
ERROR home/tests/test_models/test_storage_attributes.py::StorageCapacityTestCase::test_storage_capacity_validation
ERROR home/tests/test_models/test_storage_attributes.py::StorageCapacityTestCase::test_unique_storage_capacity
============== 70 failed, 6 passed, 78 errors in 82.05s (0:01:22) ==============
